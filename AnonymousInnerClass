package com.innerclass;

public class AnonymousInnerClass_details_01 {
    public static void main(String[] args) {
        Outer05 outer05 = new Outer05();
        outer05.fi();
    }
}
class Outer05{
    private int n1 = 99;
    public void fi(){
        // 创建一个基于类的匿名内部类
        Person student = new Person(){
            @Override
            public void hi() {
                // 可以直接访问外部类的所有属性，包括私有的
                System.out.println("Person hi()被重写了...");
            }
        };
        student.hi();

        // 也可以直接调用
//        new Person(){
//            @Override
//            public void hi() {
//                System.out.println("Person hi()又被重写了...哈哈哈哈");
//            }
//
//            @Override
//            public void ok(String str) {
//                super.ok(str);
//            }
//        }.ok("jack");
    }
}
class Person{
    public void hi(){
        System.out.println("Person hi()...");
    }
    public void ok(String str){
        System.out.println("Person ok() = "+str);
    }
}



package com.innerclass;

public class AnonymousInnerClass_exercise01 {
    public static void main(String[] args) {
        f1(new AA(){
            @Override
            public void show() {
                System.out.println("这是一幅名画~~~");
            }
        });
    }
    // 静态方法,形参是接口类型
    public static void f1(AA aa){
        aa.show();
    }
}
interface AA{
    void show();
}



package com.innerclass;

public class AnonymousInnerClass_exercise02 {
    public static void main(String[] args) {
        Cellphone cellphone = new Cellphone();
        cellphone.alarmClock(new Bell() {
            @Override
            public void ring() {
                System.out.println("懒猪起床了~~~~");
            }
        });
        cellphone.alarmClock(new Bell() {
            @Override
            public void ring() {
                System.out.println("小伙伴们上课了~~~~");
            }
        });
    }
}

class Cellphone{
    public void alarmClock(Bell bell){// 形参是接口Bell类型
        bell.ring();
    }
}
interface Bell{
    void ring();
}




package com.innerclass;

/*
演示匿名内部类的使用1:基于接口（接口A） 2:基于类（Father类）
 */
public class AnonymousInnerClass {
    public static void main(String[] args) {
        Outer04 outer04 = new Outer04();
        outer04.method();
    }
}
class Outer04{
    private int n1 = 10;//属性
    public void method(){
        // 基于接口的匿名内部类
        /*
        1.需求：想使用A接口，并创建对象   ====>  传统方式：写一个类，实现该接口，创建对象
        2.Tiger类只想用一次，以后不想再使用
        3.可以使用匿名内部类来简化
        4.tiger的编译类型是A，运行类型是 匿名内部类Tiger ====> Outer04$1
        我们看底层：系统会自己分配一个类，名字Outer04$1
        class Tiger implements A{
            @Override
            public void cry() {
                System.out.println("老虎叫唤~~~");
            }
        }
         */
        //jdk底层在创建了匿名内部类Outer04$1，立即创建了Outer04$1实例，并把地址返回给tiger
        A tiger = new A(){
            @Override
            public void cry() {
                System.out.println("老虎叫唤~~~");
            }
        };
        //匿名内部类使用一次就不能使用了，就没有了,但是创建的对象tiger可以一直使用
//        tiger.cry();
//        System.out.println(tiger.getClass());// 看匿名内部类的名称
        // 传统做法
        //A tiger = new Tiger();
        //tiger.cry();


        // 基于类的匿名内部类
        // 这里father的编译类型为Father
        // 运行类型为  匿名内部类Outer04$2
        /*
             class Outer04$2 extends Father{
             }
         */
        // 同时也返回了匿名内部类Outer04$2的对象 father
        // 注意：("jack")参数列表会传递给构造器
        Father father = new Father("jack"){
            @Override
            public void test() {
                System.out.println("匿名内部类重写了test()....");
            }
        };
        System.out.println("father对象的运行类型是："+father.getClass());// Outer04$2
        father.test();

        // 基于抽象类的匿名内部类
        Animal dog = new Animal(){
            @Override
            void cry() {
                System.out.println("小狗汪汪叫~~~");
            }
        };
        dog.cry();
    }
}
// 传统法
//class Tiger implements A{
//    @Override
//    public void cry() {
//        System.out.println("老虎叫唤~~~");
//    }
//}
interface A{//接口
    public void cry();
}

class Father{
    public Father(String name){// 构造器
        System.out.println("name = "+name);
    }
    public void test(){
        System.out.println("test()......");
    }
}
abstract class Animal{
    abstract void cry();
}
